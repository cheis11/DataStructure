package recursion2;

import java.util.Arrays;

public class GCD {

	public static void main(String[] args) {
		System.out.println("36, 12 : " + gcd(36, 12));
		System.out.println("36, 12 : " + lcm(36, 12));
		
		int[] array1 = {12,36,48,24,27};
		
		int[] array2 = new int[10];
		array2[0] = 2;
		array2[3] = 4;
		array2[5] = 8;
		
		System.out.println("Array 1 : " + multi_gcd(array1));
		System.out.println("Array 2 : " + multi_gcd(array2));
	}
	
	public static int multi_gcd(int[] array) {
		int[] a = new int[array.length];
		int b = 0;
		for(int i=0; i<array.length; i++) {
			if(array[i]!=0) {
				a[b]=array[i];
				b++;
			}
		}
		array=Arrays.copyOf(a, b);
		
		int c = array[0];
		for(int j=0; j<array.length-1; j++) {
			if(j<array.length-1) 
				c=gcd(c,array[j+1]);
		}
		return c;
	}

	public static int gcd(int a, int b) {
		int c = 0;
		if(a > b)
			if(a % b == 0) c=b;
			else {
				c = a % b;
				gcd(b, c);
			}
		else if(b > a)
			if(b % a == 0) c=a;
			else {
				c = b % a;
				gcd(a, c);
		}
		return c;
	}

	public static int lcm(int a,int b) {
		int a1=a,b1=b,c = 0;
		if(a%b==0) c=b;
		else {
			c=a%b;
			gcd(b,c);
		}
		return a1*b1/c;
	}

}
